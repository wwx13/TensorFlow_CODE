import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data

# 载入数据集
mnist = input_data.read_data_sets("MNIST_data", one_hot=True)

# 批次的大小
batch_size = 50

# 计算一共有多少批次
n_batch = mnist.train.num_examples // batch_size


# 参数概要
def variable_summary(var):
    with tf.name_scope("summaries"):
        mean = tf.reduce_mean(var)
        tf.summary.scalar("mean", mean)  # 平均值
    with tf.name_scope("stddev"):
        stddev = tf.sqrt(tf.reduce_mean(var - mean))
    tf.summary.scalar("stddev", stddev)  # 标准差
    tf.summary.scalar("max", tf.reduce_max(var))  # 最大值
    tf.summary.scalar("min", tf.reduce_min(var))  # 最小值
    tf.summary.histogram("histogram", var)  # 直方图


# 输入命名空间
with tf.name_scope("input"):
    # 定义两个placeholder
    x = tf.placeholder(tf.float32, [None, 28 * 28])
    y = tf.placeholder(tf.float32, [None, 10])

with tf.name_scope("layer"):
    # 创建一个简单的神经网络
    with tf.name_scope("weight"):
        W = tf.Variable(tf.zeros([784, 10]))
        variable_summary(W)
    with tf.name_scope("biases"):
        b = tf.Variable(tf.zeros([10]))
        variable_summary(b)
    with tf.name_scope("wx_plus_b"):
        wx_plus_b = tf.matmul(x, W) + b
    with tf.name_scope("softmax"):
        prediction = tf.nn.softmax(wx_plus_b)

with tf.name_scope("loss"):
    # 二次代价函数
    # loss = tf.reduce_mean(tf.square(y - prediction))
    # tf.summary.scalar("loss", loss)
    loss = tf.reduce_mean(-tf.reduce_sum(y * tf.log(prediction),reduction_indices=[1]))  # loss
    tf.summary.scalar("loss", loss)

with tf.name_scope("train"):
    # 使用梯度下降法
    train_step = tf.train.GradientDescentOptimizer(0.2).minimize(loss)

# 初始化变量
init = tf.global_variables_initializer()

with tf.name_scope("accuracy"):
    with tf.name_scope("correct_prediction"):
        # 计算正确率,下面是一个布尔型列表
        correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(prediction, 1))
    with tf.name_scope("accuracy"):
        # 求准确率，首先把布尔类型转化为浮点类型
        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
        tf.summary.scalar("accuracy", accuracy)

# 合并所有的summary
merged = tf.summary.merge_all()

with tf.Session() as sess:
    sess.run(init)
    # 保存Tensorboard文件
    writer = tf.summary.FileWriter("logs/", sess.graph)
    for epoch in range(51):
        for batch in range(n_batch):
            # 使用函数获取一个批次图片
            batch_xs, batch_ys = mnist.train.next_batch(batch_size)
            summary, _ = sess.run([merged, train_step], feed_dict={x: batch_xs, y: batch_ys})
        writer.add_summary(summary, epoch)
        acc = sess.run(accuracy, feed_dict={x: mnist.test.images, y: mnist.test.labels})
        print("Iter " + str(epoch) + ",Testing Accuracy " + str(acc))


